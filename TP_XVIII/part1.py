from math import *
import matplotlib.pyplot as plt

def rect_g(f, a, b, n):
    pas = (b-a)/n
    s = 0
    for k in range(n):
        c = a + k*pas
        s += f(c)
    return s*pas

# exo 1
def point_m(f, a, b, n):
    pas = (b-a)/n
    s = 0
    for k in range(n):
        c = a + k*pas
        s += f((c+c+pas)/2)
    return s*pas

print(rect_g(lambda x: x**2, 0, 2, 20))
print(point_m(lambda x: x**2, 0, 2, 20))

# exo 2
def f1(t):
    return 4 / (1+t**2)

# exo 3
# for p in range(7):
#     print("p:", "rect_g: ", abs(rect_g(f1, 0, 1, 10**(p+1)) - pi), "/ point_m: ", abs(point_m(f1, 0, 1, 10**(p+1)) - pi))

# exo 4
# N = []
# err_g = []
# err_m = []
# for i in range(100):
#     n = i*5000 + 5000
#     N.append(n)
#     err_g.append(abs(rect_g(f1, 0, 1, n) - pi))
#     err_m.append(abs(point_m(f1, 0, 1, n) - pi))

# ici on a juste recupié les valeurs obtenues pour éviter de tout recalculer à chaque fois
N = [5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 70000, 75000, 80000, 85000, 90000, 95000, 100000, 105000, 110000, 115000, 120000, 125000, 130000, 135000, 140000, 145000, 150000, 155000, 160000, 165000, 170000, 175000, 180000, 185000, 190000, 195000, 200000, 205000, 210000, 215000, 220000, 225000, 230000, 235000, 240000, 245000, 250000, 255000, 260000, 265000, 270000, 275000, 280000, 285000, 290000, 295000, 300000, 305000, 310000, 315000, 320000, 325000, 330000, 335000, 340000, 345000, 350000, 355000, 360000, 365000, 370000, 375000, 380000, 385000, 390000, 395000, 400000, 405000, 410000, 415000, 420000, 425000, 430000, 435000, 440000, 445000, 450000, 455000, 460000, 465000, 470000, 475000, 480000, 485000, 490000, 495000, 500000]
err_g = [0.00019999333332787472, 9.999833334672914e-05, 6.666592592408094e-05, 4.999958333407051e-05, 3.999973332069473e-05, 3.333314814790711e-05, 2.8571292509660395e-05, 2.4999895804622696e-05, 2.2222139921979078e-05, 1.9999933330794306e-05, 1.8181763090208136e-05, 1.666662037891342e-05, 1.5384575874577422e-05, 1.4285680258296907e-05, 1.333330371044994e-05, 1.2499973973678635e-05, 1.1764682814163763e-05, 1.1111090577831106e-05, 1.0526297278712349e-05, 9.99998335959873e-06, 9.523794371357752e-06, 9.090895296548496e-06, 8.695639603928385e-06, 8.333321777520553e-06, 7.99998935274715e-06, 7.692297831152217e-06, 7.407398238790108e-06, 7.142848682306635e-06, 6.896543770285035e-06, 6.666659256193697e-06, 6.451605881085953e-06, 6.2499934907478405e-06, 6.060599937018907e-06, 5.882347113406183e-06, 5.714280292501428e-06, 5.555550437463808e-06, 5.405400507196845e-06, 5.263153306067636e-06, 5.128200771586933e-06, 4.999995792065448e-06, 4.8780447632346124e-06, 4.761900963767829e-06, 4.651159134283489e-06, 4.545451127047073e-06, 4.4444411466670886e-06, 4.3478229767579535e-06, 4.255316089718519e-06, 4.166663801541404e-06, 4.081629865204661e-06, 3.999997209458428e-06, 3.92156595019344e-06, 3.846151425346278e-06, 3.7735824562901144e-06, 3.7037014188889827e-06, 3.6363614057677296e-06, 3.5714264110531246e-06, 3.5087698626590225e-06, 3.4482738242580524e-06, 3.389828549860141e-06, 3.3333314521932778e-06, 3.278686847352219e-06, 3.2258047717448335e-06, 3.1746014474975937e-06, 3.124998328107864e-06, 3.0769215504378167e-06, 3.0303015248200893e-06, 2.9850731073644e-06, 2.941175000881202e-06, 2.898549265495376e-06, 2.8571414887323954e-06, 2.8169001469180444e-06, 2.7777764155523244e-06, 2.7397247417404458e-06, 2.702701493717541e-06, 2.6666654004969814e-06, 2.631577805889407e-06, 2.5974015183116705e-06, 2.5641014205213253e-06, 2.5316445428913426e-06, 2.499998910554524e-06, 2.4691348134986413e-06, 2.4390233481774715e-06, 2.4096374313664626e-06, 2.380951461766756e-06, 2.35294021067034e-06, 2.325580482409606e-06, 2.2988496204412456e-06, 2.272726462582142e-06, 2.2471901370835212e-06, 2.2222213678091407e-06, 2.197801560743784e-06, 2.1739123097219704e-06, 2.1505367979735013e-06, 2.1276590174146293e-06, 2.105262431495447e-06, 2.0833325748981224e-06, 2.0618549547712917e-06, 2.040815655135475e-06, 2.0202013009118502e-06, 1.9999993581265585e-06]
err_m = [3.3333296123316813e-09, 8.3334095180021e-10, 3.703659601228537e-10, 2.0833201830328107e-10, 1.3333290027617295e-10, 9.258194211270165e-11, 6.803402285981974e-11, 5.21169774003738e-11, 4.112399309974535e-11, 3.332489839635855e-11, 2.7548185954628934e-11, 2.3162805007359566e-11, 1.9704238241047278e-11, 1.702415985960215e-11, 1.4835244144251192e-11, 1.3031353773840237e-11, 1.155475715108878e-11, 1.0325074129013956e-11, 9.244160992238903e-12, 8.36841707041458e-12, 7.58815232870802e-12, 6.8620664706031675e-12, 6.277200981230635e-12, 5.788702850395566e-12, 5.357048138421305e-12, 4.9329429430144955e-12, 4.616307336391401e-12, 4.2938985700402554e-12, 3.948397164776907e-12, 3.695266315162371e-12, 3.426148253993233e-12, 3.213429522475053e-12, 3.0184743593508756e-12, 2.823519196226698e-12, 2.757793993168889e-12, 2.597033699203166e-12, 2.4704682743958983e-12, 2.3159252293680765e-12, 2.2097879082139116e-12, 2.0965451597021456e-12, 2.042810365310288e-12, 1.930011706008372e-12, 1.77280412572145e-12, 1.6604495556293841e-12, 1.6435741656550817e-12, 1.5947243525715749e-12, 1.5623058402525203e-12, 1.3948842081390467e-12, 1.3944401189291966e-12, 1.2922996006636822e-12, 1.3211653993039363e-12, 1.2168044349891716e-12, 1.1399770016851107e-12, 1.105782132526656e-12, 1.0764722446765518e-12, 1.043165553937797e-12, 1.0347278589506459e-12, 1.028510610012745e-12, 9.072742557236779e-13, 8.193445921733655e-13, 8.890665981198254e-13, 8.673062268371723e-13, 8.957279362675763e-13, 8.57980353430321e-13, 7.971401316808624e-13, 7.838174553853605e-13, 6.887823644774471e-13, 6.390443729742401e-13, 6.981082378842984e-13, 6.612488334667432e-13, 6.585842982076429e-13, 6.323830348264892e-13, 6.887823644774471e-13, 6.217248937900877e-13, 6.110667527536862e-13, 6.292744103575387e-13, 5.160316618457728e-13, 6.394884621840902e-13, 5.084821452783217e-13, 5.88418203051333e-13, 6.084022174945858e-13, 4.924949337237194e-13, 5.182521078950231e-13, 2.815525590449397e-13, 4.924949337237194e-13, 4.4142467459096224e-13, 3.2107649872159527e-13, 4.418687638008123e-13, 3.2152058793144533e-13, 4.0101255649460654e-13, 4.285460875053104e-13, 4.1167069753100805e-13, 4.884981308350689e-13, 2.9753977059954195e-13, 5.275779813018744e-13, 3.89910326248355e-13, 2.362554596402333e-13, 2.97983859809392e-13, 4.600764214046649e-13, 3.135269821541442e-13]

plt.subplot(1, 3, 1)
plt.plot(N, err_g, label="Rectangles")
plt.plot(N, err_m, label="Point milieu")
plt.legend()

plt.subplot(1, 3, 2)
plt.xscale('log')
plt.yscale('log')
plt.plot(N, err_g, label="Rectangles")
plt.plot(N, err_m, label="Point milieu")
plt.legend()

K_g = []
K_m = []
for i in range(100):
    K_g.append(err_g[i]*N[i])
    K_m.append(err_m[i]*N[i]**2)

plt.subplot(1, 3, 3)
plt.xscale('linear')
plt.yscale('linear')
plt.plot(N, K_g, label="Km")
plt.plot(N, K_m, label="Kg")
plt.legend()
plt.show()